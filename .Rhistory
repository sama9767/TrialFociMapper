# Fixed database connection details
dbname <- "aact"
host <- "aact-db.ctti-clinicaltrials.org"
port <- 5432
# Load default mesh_tree
mesh_tree <- rio::import("https://raw.githubusercontent.com/sama9767/TrialFociMapper/main/data/mesh_tree.csv") |>
dplyr::mutate(mesh_heading_lower = tolower(mesh_heading))
# Connect to the AACT database
con <- dbConnect(RPostgreSQL::PostgreSQL(),
dbname = dbname,
host = host,
port = port,
user = username,
password = password)
all_foci <- data.frame(nct_id = character(), trial_foci_table = character(), stringsAsFactors = FALSE)
for (nctid in nctids) {
# Download browse_conditions table for the current NCT ID
query <- paste0("SELECT * FROM browse_conditions WHERE nct_id = '", nctid, "'")
browse_conditions <- RPostgreSQL::dbGetQuery(con, query)
# Find matching major mesh headings for the mesh terms
mesh_terms <- browse_conditions$downcase_mesh_term
matching_mesh_headings <- mesh_tree$major_mesh_heading[stringdist::amatch(mesh_terms, mesh_tree$mesh_heading_lower, maxDist = 1)]
# Combine matching major mesh headings into a single string
trial_foci <- ifelse(length(matching_mesh_headings) == 0, "", stringr::str_c(unique(matching_mesh_headings), collapse = ";"))
# Append results to the final data frame
all_foci <- rbind(all_foci, data.frame(nct_id = nctid, trial_foci_table = trial_foci, stringsAsFactors = FALSE))
}
# Split the trial_foci_table column into major and other foci
trial_foci_table_raw <-
tidyr::separate(all_foci, trial_foci_table,
into = c("major_mesh_heading_1", "major_mesh_heading_2",
"major_mesh_heading_3", "major_mesh_heading_4",
"major_mesh_heading_5", "major_mesh_heading_6",
"major_mesh_heading_7", "major_mesh_heading_8",
"major_mesh_heading_9", "major_mesh_heading_10"),
sep = ";", fill = "right")
# Keep distinct entries based on nct_id
trial_foci_table <-
trial_foci_table_raw |>
dplyr::distinct(nct_id, .keep_all = TRUE)
# Disconnect from the database
RPostgreSQL::dbDisconnect(con)
return(trial_foci_table)
}
generate_foci("NCT05676164", "samruddhi", "Swapnali!123")
#'@title generate_foci
#'
#'@name generate_foci
#
#'@description
#'This function retrieves trial foci based on a list of NCT IDs from a PostgreSQL database.
#'It connects to the AACT database, retrieves the major mesh headings associated with the NCT IDs, and
#'generates major therapeutic focus for each trial according to NLM 2023 MeSH headings.The output is
#'a data frame containing the NCT IDs and their respective therapeutic focuses.
#'
#
#'@param nctids (character vector): A vector of NCT IDs for which trial foci need to be generated.
#'@param username (character): The username for database authentication.
#'@param password (character): The password for database authentication.
#'
#'@note An account in AACT database is required for credentials
#'(visit this link for registration : https://aact.ctti-clinicaltrials.org/users/sign_up)
#'
#'@import RPostgreSQL
#'@import assertthat
#'@import magrittr
#'@import rio
#'@import stringdist
#'
#'@usage generate_foci(nctids, username, password)
#'
#'@export
#'
library(RPostgreSQL)
library(assertthat)
library(magrittr)
generate_foci <- function(nctids, username, password) {
# Check that TRN is well-formed
assertthat::assert_that(
is.character(nctids),
all(grepl("^NCT\\d{8}$", nctids))
)
# Fixed database connection details
dbname <- "aact"
host <- "aact-db.ctti-clinicaltrials.org"
port <- 5432
# Load default mesh_tree
mesh_tree <- rio::import("https://raw.githubusercontent.com/sama9767/TrialFociMapper/main/data/mesh_tree.csv") |>
dplyr::mutate(mesh_heading_lower = tolower(mesh_heading))
# Connect to the AACT database
con <- dbConnect(RPostgreSQL::PostgreSQL(),
dbname = dbname,
host = host,
port = port,
user = username,
password = password)
all_foci <- data.frame(nct_id = character(), trial_foci_table = character(), stringsAsFactors = FALSE)
for (nctid in nctids) {
# Download browse_conditions table for the current NCT ID
query <- paste0("SELECT * FROM browse_conditions WHERE nct_id = '", nctid, "'")
browse_conditions <- RPostgreSQL::dbGetQuery(con, query)
# Find matching major mesh headings for the mesh terms
mesh_terms <- browse_conditions$downcase_mesh_term
matching_mesh_headings <- mesh_tree$major_mesh_heading[stringdist::amatch(mesh_terms, mesh_tree$mesh_heading_lower, maxDist = 7)]
# Combine matching major mesh headings into a single string
trial_foci <- ifelse(length(matching_mesh_headings) == 0, "", stringr::str_c(unique(matching_mesh_headings), collapse = ";"))
# Append results to the final data frame
all_foci <- rbind(all_foci, data.frame(nct_id = nctid, trial_foci_table = trial_foci, stringsAsFactors = FALSE))
}
# Split the trial_foci_table column into major and other foci
trial_foci_table_raw <-
tidyr::separate(all_foci, trial_foci_table,
into = c("major_mesh_heading_1", "major_mesh_heading_2",
"major_mesh_heading_3", "major_mesh_heading_4",
"major_mesh_heading_5", "major_mesh_heading_6",
"major_mesh_heading_7", "major_mesh_heading_8",
"major_mesh_heading_9", "major_mesh_heading_10"),
sep = ";", fill = "right")
# Keep distinct entries based on nct_id
trial_foci_table <-
trial_foci_table_raw |>
dplyr::distinct(nct_id, .keep_all = TRUE)
# Disconnect from the database
RPostgreSQL::dbDisconnect(con)
return(trial_foci_table)
}
generate_foci("NCT05676164", "samruddhi", "Swapnali!123")
generate_foci("NCT03722264
", "samruddhi", "Swapnali!123")
generate_foci("NCT03722264", "samruddhi", "Swapnali!123")
generate_foci("NCT05080829", "samruddhi", "Swapnali!123")
#'@title generate_foci_ctgov_ctgov
#'
#'@name generate_foci_ctgov
#
#'@description
#'This function retrieves trial foci based on a list of NCT IDs from a PostgreSQL database.
#'It connects to the AACT database, retrieves the major mesh headings associated with the NCT IDs, and
#'generates major therapeutic focus for each trial according to NLM 2023 MeSH headings.The output is
#'a data frame containing the NCT IDs and their respective therapeutic focuses.
#'
#
#'@param nctids (character vector): A vector of NCT IDs for which trial foci need to be generated.
#'@param username (character): The username for database authentication.
#'@param password (character): The password for database authentication.
#'
#'@note An account in AACT database is required for credentials
#'(visit this link for registration : https://aact.ctti-clinicaltrials.org/users/sign_up)
#'
#'@import RPostgreSQL
#'@import assertthat
#'@import magrittr
#'@import rio
#'@import stringdist
#'
#'@usage generate_foci_ctgov(nctids, username, password)
#'
#'@export
#'
library(RPostgreSQL)
library(assertthat)
library(magrittr)
generate_foci_ctgov <- function(nctids, username, password) {
# Check that TRN is well-formed
assertthat::assert_that(
is.character(nctids),
all(grepl("^NCT\\d{8}$", nctids))
)
# Fixed database connection details
dbname <- "aact"
host <- "aact-db.ctti-clinicaltrials.org"
port <- 5432
# Load default mesh_tree
mesh_tree <- rio::import("https://raw.githubusercontent.com/sama9767/TrialFociMapper/main/data/mesh_tree.csv") |>
dplyr::mutate(mesh_heading_lower = tolower(mesh_heading))
# Connect to the AACT database
con <- dbConnect(RPostgreSQL::PostgreSQL(),
dbname = dbname,
host = host,
port = port,
user = username,
password = password)
all_foci <- data.frame(nct_id = character(), trial_foci_table = character(), stringsAsFactors = FALSE)
for (nctid in nctids) {
# Download browse_conditions table for the current NCT ID
query <- paste0("SELECT * FROM browse_conditions WHERE nct_id = '", nctid, "'")
browse_conditions <- RPostgreSQL::dbGetQuery(con, query)
# Find matching major mesh headings for the mesh terms
mesh_terms <- browse_conditions$downcase_mesh_term
matching_mesh_headings <- mesh_tree$major_mesh_heading[stringdist::amatch(mesh_terms, mesh_tree$mesh_heading_lower, maxDist = 7)]
# Combine matching major mesh headings into a single string
trial_foci <- ifelse(length(matching_mesh_headings) == 0, "", stringr::str_c(unique(matching_mesh_headings), collapse = ";"))
# Append results to the final data frame
all_foci <- rbind(all_foci, data.frame(nct_id = nctid, trial_foci_table = trial_foci, stringsAsFactors = FALSE))
}
# Split the trial_foci_table column into major and other foci
trial_foci_table_raw <-
tidyr::separate(all_foci, trial_foci_table,
into = c("major_mesh_heading_1", "major_mesh_heading_2",
"major_mesh_heading_3", "major_mesh_heading_4",
"major_mesh_heading_5", "major_mesh_heading_6",
"major_mesh_heading_7", "major_mesh_heading_8",
"major_mesh_heading_9", "major_mesh_heading_10"),
sep = ";", fill = "right")
# Keep distinct entries based on nct_id
trial_foci_table <-
trial_foci_table_raw |>
dplyr::distinct(nct_id, .keep_all = TRUE)
# Disconnect from the database
RPostgreSQL::dbDisconnect(con)
return(trial_foci_table)
}
generate_foci_ctgov("NCT06159582", "samruddhi", "Swapnali!123")
generate_foci_ctgov("NCT06159556", "samruddhi", "Swapnali!123")
generate_foci_ctgov("NCT06159504", "samruddhi", "Swapnali!123")
generate_foci_ctgov("NCT06159127", "samruddhi", "Swapnali!123")
#' @title generate_foci_euctr
#'
#' @description Downloads the medical condition field from EUCTR for a
#'     given record identifier
#'
#' @param trn A character string containing a well-formed EUCTR
#'     identifier
#'
#' @return A character string with the contents of the
#'     "Medical condition field" from EUCTR for the record that
#'     corresponds to the provided identifier
#'
#' @export
#'
#' @examples
#' generate_foci_euctr("2010-023457-11")
#' ## "advanced/recurrent ovarian and endometrial cancer"
generate_foci_euctr <- function (trn) {
## Check that trn is well-formed
assertthat::assert_that(
grepl("^[0-9]{4}-[0-9]{6}-[0-9]{2}$", trn),
msg = "TRN is not well-formed"
)
## Check that the site is reachable
assertthat::assert_that(
! httr::http_error("https://www.clinicaltrialsregister.eu"),
msg = "Unable to connect to EUCTR"
)
## Construct the URL
url <- paste0(
"https://www.clinicaltrialsregister.eu/ctr-search/search?query=",
trn
)
## Download data
html <- NA
html <- rvest::read_html(url)
## Select medical condition field
condition <- html %>%
rvest::html_nodes(
xpath=".//*[contains(text(), 'Medical condition')]/.."
) %>%
rvest::html_text2() %>%
stringr::str_extract("^Medical condition: (.*)$", group = 1) %>%
stringr::str_trim()
## Check that exactly one record was returned
assertthat::assert_that(
length(condition) == 1,
msg = "There are zero or more than one records returned by this query"
)
## Return result
return(condition)
}
generate_foci_euctr("2010-023457-11")
#' @title generate_foci_euctr
#'
#' @description Downloads the medical condition field from EUCTR for a
#'     given record identifier
#'
#' @param trn A character string containing a well-formed EUCTR
#'     identifier
#'
#' @return A character string with the contents of the
#'     "Medical condition field" from EUCTR for the record that
#'     corresponds to the provided identifier
#'
#' @export
#'
#' @examples
#' generate_foci_euctr("2010-023457-11")
#' ## "advanced/recurrent ovarian and endometrial cancer"
generate_foci_euctr <- function (trn) {
## Check that trn is well-formed
assertthat::assert_that(
grepl("^[0-9]{4}-[0-9]{6}-[0-9]{2}$", trn),
msg = "TRN is not well-formed"
)
## Check that the site is reachable
assertthat::assert_that(
! httr::http_error("https://www.clinicaltrialsregister.eu"),
msg = "Unable to connect to EUCTR"
)
## Construct the URL
url <- paste0(
"https://www.clinicaltrialsregister.eu/ctr-search/search?query=",
trn
)
## Download data
html <- NA
html <- rvest::read_html(url)
## Select medical condition field
condition <- html %>%
rvest::html_nodes(
xpath=".//*[contains(text(), 'Medical condition')]/.."
) %>%
rvest::html_text2() %>%
stringr::str_extract("^Medical condition: (.*)$", group = 1) %>%
stringr::str_trim()
## Check that exactly one record was returned
assertthat::assert_that(
length(condition) == 1,
msg = "There are zero or more than one records returned by this query"
)
## Return result
return(condition)
}
euct <- c("2010-023457-11", "2006-000653-22")
euct <- as.data.frame(trn = c("2010-023457-11", "2006-000653-22"))
euct <- data.frame(trn = c("2010-023457-11", "2006-000653-22"))
x <- generate_foci_euctr(euct$trn)
devtools::document()
install.packages(fastmap)
install.packages("fastmap")
library(fastmap)
devtools::document()
devtools::document()
devtools::build()
devtools::build()
devtools::document()
devtools::build()
devtools::install_local(C:/Users/hp/Documents/GitHub/TrialFocimapper/TrialFociMapper_1.0.0.tar.gz)
devtools::install_local("C:/Users/hp/Documents/GitHub/TrialFocimapper/TrialFociMapper_1.0.0.tar.gz")
library(TrialFociMapper)
TrialFociMapper::generate_foci_euctr("2010-023457-11")
TrialFociMapper::generate_foci_ctgov("NCT01271322", "samruddhi", "Swapnali!123")
y <- TrialFociMapper::generate_foci_ctgov("NCT01271322", "samruddhi", "Swapnali!123")
View(y)
#'@title generate_foci_ctgov
#'
#'@name generate_foci_ctgov
#
#'@description
#'This function retrieves trial foci based on a list of NCT IDs from a PostgreSQL database.
#'It connects to the AACT database, retrieves the major mesh headings associated with the NCT IDs, and
#'generates major therapeutic focus for each trial according to NLM 2023 MeSH headings.The output is
#'a data frame containing the NCT IDs and their respective therapeutic focuses.
#'
#
#'@param nctids (character vector): A vector of NCT IDs for which trial foci need to be generated.
#'@param username (character): The username for database authentication.
#'@param password (character): The password for database authentication.
#'
#'@note An account in AACT database is required for credentials
#'(visit this link for registration : https://aact.ctti-clinicaltrials.org/users/sign_up)
#'
#'@import RPostgreSQL
#'@import assertthat
#'@import magrittr
#'@import rio
#'@import stringdist
#'
#'@usage generate_foci_ctgov(nctids, username, password)
#'
#'@export
#'
library(RPostgreSQL)
library(assertthat)
library(magrittr)
library(dplyr)
generate_foci <- function(nctids, username, password) {
# Check that TRN is well-formed
assertthat::assert_that(
is.character(nctids),
all(grepl("^NCT\\d{8}$", nctids))
)
# Fixed database connection details
dbname <- "aact"
host <- "aact-db.ctti-clinicaltrials.org"
port <- 5432
# Load default mesh_tree
mesh_tree <- rio::import("https://raw.githubusercontent.com/sama9767/TrialFociMapper/main/data/mesh_tree.csv") |>
dplyr::mutate(mesh_heading_lower = tolower(mesh_heading))
# Connect to the AACT database
con <- dbConnect(RPostgreSQL::PostgreSQL(),
dbname = dbname,
host = host,
port = port,
user = username,
password = password)
all_foci <- data.frame(nct_id = character(), trial_foci_table = character(), stringsAsFactors = FALSE)
for (nctid in nctids) {
# Download browse_conditions table for the current NCT ID
query <- paste0("SELECT * FROM browse_conditions WHERE nct_id = '", nctid, "'")
browse_conditions <- RPostgreSQL::dbGetQuery(con, query)
# Find matching major mesh headings for the mesh terms
mesh_terms <- browse_conditions$downcase_mesh_term
matching_mesh_headings <- mesh_tree$major_mesh_heading[stringdist::amatch(mesh_terms, mesh_tree$mesh_heading_lower, maxDist = 7)]
# Combine matching major mesh headings into a single string
trial_foci <- ifelse(length(matching_mesh_headings) == 0, "", stringr::str_c(unique(matching_mesh_headings), collapse = ";"))
# Append results to the final data frame
all_foci <- rbind(all_foci, data.frame(nct_id = nctid, trial_foci_table = trial_foci, stringsAsFactors = FALSE))
}
# Split the trial_foci_table column into major and other foci
all_foci$trial_foci_table_list <- all_foci$trial_foci_table %>%
strsplit(";") %>%
as.list()
# Keep distinct entries based on nct_id
all_foci <-
all_foci |>
dplyr::distinct(nct_id, .keep_all = TRUE)
all_foci <- all_foci %>%
select(! trial_foci_table)
# Disconnect from the database
RPostgreSQL::dbDisconnect(con)
return(all_foci)
}
devtools::load_all(".")
TrialFociMapper::generate_foci_ctgov("NCT01271322", "samruddhi", "Swapnali!123")
x <- TrialFociMapper::generate_foci_ctgov("NCT01271322", "samruddhi", "Swapnali!123")
y <- assign_therapeutic_focus(x)
View(y)
devtools::document()
devtools::build()
devtools::install_local("C:/Users/hp/Documents/GitHub/TrialFocimapper/TrialFociMapper_1.0.0.tar.gz")
x <- TrialFociMapper::generate_foci_ctgov("NCT01271322", "samruddhi", "Swapnali!123")
View(x)
#'@title generate_foci_ctgov
#'
#'@name generate_foci_ctgov
#
#'@description
#'This function retrieves trial foci based on a list of NCT IDs from a PostgreSQL database.
#'It connects to the AACT database, retrieves the major mesh headings associated with the NCT IDs, and
#'generates major therapeutic focus for each trial according to NLM 2023 MeSH headings.The output is
#'a data frame containing the NCT IDs and their respective therapeutic focuses.
#'
#
#'@param nctids (character vector): A vector of NCT IDs for which trial foci need to be generated.
#'@param username (character): The username for database authentication.
#'@param password (character): The password for database authentication.
#'
#'@note An account in AACT database is required for credentials
#'(visit this link for registration : https://aact.ctti-clinicaltrials.org/users/sign_up)
#'
#'@import RPostgreSQL
#'@import assertthat
#'@import magrittr
#'@import rio
#'@import stringdist
#'@import dplyr
#'
#'@usage generate_foci_ctgov(nctids, username, password)
#'
#'@export
#'
library(RPostgreSQL)
library(assertthat)
library(magrittr)
library(dplyr)
generate_foci_ctgov <- function(nctids, username, password) {
# Check that TRN is well-formed
assertthat::assert_that(
is.character(nctids),
all(grepl("^NCT\\d{8}$", nctids))
)
# Fixed database connection details
dbname <- "aact"
host <- "aact-db.ctti-clinicaltrials.org"
port <- 5432
# Load default mesh_tree
mesh_tree <- rio::import("https://raw.githubusercontent.com/sama9767/TrialFociMapper/main/data/mesh_tree.csv") |>
dplyr::mutate(mesh_heading_lower = tolower(mesh_heading))
# Connect to the AACT database
con <- dbConnect(RPostgreSQL::PostgreSQL(),
dbname = dbname,
host = host,
port = port,
user = username,
password = password)
all_foci <- data.frame(nct_id = character(), trial_foci_table = character(), stringsAsFactors = FALSE)
for (nctid in nctids) {
# Download browse_conditions table for the current NCT ID
query <- paste0("SELECT * FROM browse_conditions WHERE nct_id = '", nctid, "'")
browse_conditions <- RPostgreSQL::dbGetQuery(con, query)
# Find matching major mesh headings for the mesh terms
mesh_terms <- browse_conditions$downcase_mesh_term
matching_mesh_headings <- mesh_tree$major_mesh_heading[stringdist::amatch(mesh_terms, mesh_tree$mesh_heading_lower, maxDist = 7)]
# Combine matching major mesh headings into a single string
trial_foci <- ifelse(length(matching_mesh_headings) == 0, "", stringr::str_c(unique(matching_mesh_headings), collapse = ";"))
# Append results to the final data frame
all_foci <- rbind(all_foci, data.frame(nct_id = nctid, trial_foci_table = trial_foci, stringsAsFactors = FALSE))
}
# Split the trial_foci_table column into major and other foci
all_foci$trial_foci_table_list <- all_foci$trial_foci_table %>%
strsplit(";") %>%
as.list()
# Keep distinct entries based on nct_id
all_foci <-
all_foci |>
dplyr::distinct(nct_id, .keep_all = TRUE)
all_foci <- all_foci %>%
select(! trial_foci_table)
# Disconnect from the database
RPostgreSQL::dbDisconnect(con)
return(all_foci)
}
generate_foci_ctgov("NCT01271322", "samruddhi", "Swapnali!123")
